using System;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace DemoGenerator;

[Generator(LanguageNames.CSharp)]
public class TypedSignalrClientGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // predict: node 是 class 且上面掛有 attribute TypeHubClientAttribute
        var provider = context.SyntaxProvider.ForAttributeWithMetadataName(
            "DemoAttribute.TypedHubClientAttribute",
            predicate: static (node, _) => node.IsKind(SyntaxKind.ClassDeclaration),
            transform: static (ctx, _) => TransformContext(ctx)
        );

        context.RegisterSourceOutput(provider, static (productionContext, tuple) =>
        {
            productionContext.AddSource("TypedSignalrClientXXX.g.cs",
                $$"""
                   namespace AutoGenerated;
                   
                   public class TypedHubConnection
                   {
                      {{GenerateDelegates(tuple.InterfaceType)}}
                   }
                  """);
        });
    }

    private static string GenerateDelegates(Type tupleInterfaceType)
    {
        return $"""
                
                """;
    }

    private static (string Name, Type InterfaceType) TransformContext(GeneratorAttributeSyntaxContext ctx)
    {
        return (ctx.TargetSymbol.Name,
            ctx.Attributes.First(x => x.AttributeClass?.Name == "TypedHubClientAttribute")
                .ConstructorArguments
                .First().Value as Type)!;
    }
}